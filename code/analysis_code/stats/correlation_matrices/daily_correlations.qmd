---
title: "cor"
format:
  pdf:
    theme: default
header-includes:
    - \usepackage{caption}
---

**This code creates a correlation matrix to look at relationships between variables. This helps identify specific relationships of interest**

[Link](http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software):

# Getting Started

#### Libraries

```{r, include= FALSE}
library(tidyverse)
library(here)
library(Hmisc)#Cor Tables and Lag
library(corrplot) #Cor Plots
library(lubridate) #For dates
library(ggpubr) #Plot stacking
library(kableExtra)
library(naniar)
library(corrtable) #This is a good package for making corrleation tables as opposed to matrices
```

#### Data

Site data sets have lags incorporated (made in `MASTER_MAKER.qmd`)

```{r, include = FALSE}
bo<- read_csv(here("data", "processed_data", "bo_master_daily.csv"))
c2<- read_csv(here("data", "processed_data", "c2_master_daily.csv"))
rd<- read_csv(here("data", "processed_data", "rd_master_daily.csv"))
sp<- read_rds(here("data", "processed_data", "qpcr", "species_copies.rds")) #species specific copiesv
```

# Cleaning

#### Remove non-numeric variables

```{r}
bo<- 
  bo %>%
  select(!c(date, ...1))

c2<- 
  c2 %>%
  select(!c(date, ...1))

rd<- 
  rd %>%
  select(!c(date, ...1))
```

#### Make Datasets for normal and non-normal variables

Variables that are normally distributed across all three sites will be in one df. All others will be in another.

```{r}
#BLIND OSO
b_norm<- 
  bo %>%
  select(!c(sal, secchi, nn, tdn, don, doc, toc, tn))
b_para<- 
  bo %>%
  select(sal, secchi, nn, tdn, don, doc, toc, tn)

#CANALS
c_norm<- 
  c2 %>%
  select(!c(sal, secchi, nn, tdn, don, doc, toc, tn))
c_para<- 
  c2 %>%
  select(sal, secchi, nn, tdn, don, doc, toc, tn)

#GULF
r_norm<- 
  rd %>%
  select(!c(sal, secchi, nn, tdn, don, doc, toc, tn))
r_para<- 
  rd %>%
  select(sal, secchi, nn, tdn, don, doc, toc, tn)
```

#### Log10 Transform non-normally distributed data for Norm df

Distributions can be found in `1_distribution.qmd`

```{r}
#BLIND OSO
b_norm<-
  b_norm %>%
  mutate(amm = log10(amm), #Log-transforms data
         din_dip = log10(din_dip),
         dust = log10(dust),
         chl = log10(chl),
         dust_lag = log10(dust_lag)) 
 
#CANALS
c_norm<- 
  c_norm %>%
  mutate(orthop = log10(orthop),
         dust = log10(dust),
         dust_lag = log10(dust_lag)) 


#GULF
r_norm<- 
  r_norm %>%
  mutate(dust = log10(dust),
         dust_lag = log10(dust_lag))
```

# Correlation Matrix

There are different methods for **correlation analysis** : **Pearson parametric correlation test**, **Spearman** and **Kendall** rank-based **correlation analysis**. The default is [pearson correlation coefficient](http://www.sthda.com/english/wiki/correlation-test-between-two-variables) which measures the linear **dependence** between two variables. [kendall and spearman](http://www.sthda.com/english/wiki/correlation-test-between-two-variables) correlation methods are non-parametric **rank-based correlation test**.

#### 1. Compute Correlations

If your data contain missing values, use the following R code to handle missing values by case-wise deletion.

    cor(x, method = "pearson", use = "complete.obs")

```{r, include = FALSE}
#Normal Data = Pearson's
b<- cor(b_norm, method = "pearson") #Default method = pearson
round(b,2) #Round correlation coeff to "x" digits 

c<- cor(c_norm, method = "pearson")
round(c,2)

r<- cor(r_norm, method = "pearson")
round(r,2)

#Non-parametric Data  = Spearman's
b1<- cor(b_para, method = "spearman") 
round(b,2) #Round correlation coeff to "x" digits 

c1<- cor(c_para, method = "spearman")
round(c,2)

r1<- cor(r_para, method = "spearman")
round(r,2)

#All Data = Spearman's
b2<- cor(bo, method = "spearman") 
round(b,2) #Round correlation coeff to "x" digits 

c22<- cor(c2, method = "spearman")
round(c,2)

r2<- cor(rd, method = "spearman")
round(r,2)
```

#### 2. Make Function to Format

Simple function for formatting a **correlation matrix** into a table with 4 columns containing : Column 1 : row names (variable 1 for the correlation test), Column 2 : column names (variable 2 for the correlation test), Column 3 : the **correlation coefficients**, Column 4 : the **p-values** of the correlations

```{r}
flattenCorrMatrix <- function(cormat, pmat) {
  ut <- upper.tri(cormat)
  data.frame(
    row = rownames(cormat)[row(cormat)[ut]],
    column = rownames(cormat)[col(cormat)[ut]],
    cor  =(cormat)[ut],
    p = pmat[ut])}
```

#### 3. Make Matrix

The function **rcorr()** \[in **Hmisc** package\] can be used to compute the **significance levels** for **pearson** and **spearman correlations**. It returns both the correlation coefficients and the p-value of the correlation for all possible pairs of columns in the data table.

**NOTE THIS IS WITH DATA SETS PRIOR TO LOG TRANSFORMATION. SO EVERYTHING SPEARMANS.**

```{r}
bclean<- rcorr(as.matrix(bo))
flattenCorrMatrix(bclean$r, bclean$P)

cclean<- rcorr(as.matrix(c2))
flattenCorrMatrix(cclean$r, cclean$P)

rclean<- rcorr(as.matrix(rd))
flattenCorrMatrix(rclean$r, rclean$P)
```

#### Extract cor and p value

#### Visualize with `corrplot()` function

The function **corrplot()** takes the **correlation matrix** as the first argument. The second argument (type="upper") is used to display only the upper triangular of the **correlation matrix**.

#### Just Normal Data

```{r}
#Normal Data 
 corrplot(b, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Blind Oso_Pearson",  mar=c(0,0,1,0)) #Adds and lowers title 

 corrplot(c, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Canals_Pearson", mar=c(0,0,1,0))

 corrplot(r, type = "upper", 
         tl.col = "black", tl.srt = 45, mar=c(0,0,1,0))
         title(main = "Gulf_Pearson")
```

#### All Spearman

```{r}
#Non-Parametric Data
 corrplot(b2, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Blind Oso_Spearman_all",  mar=c(0,0,1,0)) #Adds and lowers title 

corrplot(c22, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Canals_Spearman_all", mar=c(0,0,1,0))

corrplot(r2, type = "upper", 
         tl.col = "black", tl.srt = 45, mar=c(0,0,1,0))
         title(main = "Gulf_Spearman_all" )
```

#### Everything

```{r, fig.width=6}
par(mfrow=c(3,3))
#Normal Data 
 corrplot(b, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Blind Oso_Pearson",  mar=c(0,0,1,0)) #Adds and lowers title 

 corrplot(c, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Canals_Pearson", mar=c(0,0,1,0))

 corrplot(r, type = "upper", 
         tl.col = "black", tl.srt = 45, mar=c(0,0,1,0))
         title(main = "Gulf_Pearson")
         
#Non-Parametric Data
 corrplot(b1, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Blind Oso_Spearman",  mar=c(0,0,1,0)) #Adds and lowers title 

corrplot(c1, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Canals_Spearman", mar=c(0,0,1,0))

corrplot(r1, type = "upper", 
         tl.col = "black", tl.srt = 45, mar=c(0,0,1,0))
         title(main = "Gulf_Spearman" )
         
#Non-Parametric Data
 corrplot(b2, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Blind Oso_Spearman_all",  mar=c(0,0,1,0)) #Adds and lowers title 

corrplot(c22, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Canals_Spearman_all", mar=c(0,0,1,0))

corrplot(r2, type = "upper", 
         tl.col = "black", tl.srt = 45, mar=c(0,0,1,0))
         title(main = "Gulf_Spearman_all" )
```

# Correlation Tables

#### Load in data again to bypass earlier code

```{r, include = FALSE}
bo<- read_csv(here("data", "processed_data", "bo_master_daily.csv"))
c2<- read_csv(here("data", "processed_data", "c2_master_daily.csv"))
rd<- read_csv(here("data", "processed_data", "rd_master_daily.csv"))
```

#### Rename Copies --> Vibrio

```{r}
bo<- 
  bo %>%
  rename("Total Vibrio" = "copies_mL",
         "Chlorophyl a" = "chl",
         "Salinity" = "sal",
         "Temperature" = "temp",
         "Dissolved Oxygen (mg/L)" = "do_mgl",
         "Dissolved Oxygen (%)" = "do_per",
         "Secchi" = "secchi",
         "Ammonium" = "amm",
         "Nitrate+Nitrite" = "nn",
         "Orthophosphate" = "orthop",
         "Silicate" = "sil",
         "DIN" = "din",
         "DIN:DIP" = "din_dip",
         "TDN" = "tdn",
         "DON" = "don",
         "DOC" = "doc",
         "TOC" = "toc",
         "TN" = "tn",
         "Dust" = "dust",
         "Dust_Lag" = "dust_lag")

c2<- 
  c2 %>%
  rename("Total Vibrio" = "copies_mL",
         "Chlorophyl a" = "chl",
         "Salinity" = "sal",
         "Temperature" = "temp",
         "Dissolved Oxygen (mg/L)" = "do_mgl",
         "Dissolved Oxygen (%)" = "do_per",
         "Secchi" = "secchi",
         "Ammonium" = "amm",
         "Nitrate+Nitrite" = "nn",
         "Orthophosphate" = "orthop",
         "Silicate" = "sil",
         "DIN" = "din",
         "DIN:DIP" = "din_dip",
         "TDN" = "tdn",
         "DON" = "don",
         "DOC" = "doc",
         "TOC" = "toc",
         "TN" = "tn",
         "Dust" = "dust",
         "Dust_Lag" = "dust_lag")

rd<- 
  rd %>%
  rename("Total Vibrio" = "copies_mL",
         "Chlorophyl a" = "chl",
         "Salinity" = "sal",
         "Temperature" = "temp",
         "Dissolved Oxygen (mg/L)" = "do_mgl",
         "Dissolved Oxygen (%)" = "do_per",
         "Secchi" = "secchi",
         "Ammonium" = "amm",
         "Nitrate+Nitrite" = "nn",
         "Orthophosphate" = "orthop",
         "Silicate" = "sil",
         "DIN" = "din",
         "DIN:DIP" = "din_dip",
         "TDN" = "tdn",
         "DON" = "don",
         "DOC" = "doc",
         "TOC" = "toc",
         "TN" = "tn",
         "Dust" = "dust",
         "Dust_Lag" = "dust_lag")
```

#### Create Species Dataframes and Site-Species Dataframes

```{r}
#SPECIES DF
vc<-
  sp %>%
  filter(type %in% "V. cholerae") %>%
  rename("Vc" = "copies_mL")
vp<-
  sp %>%
  filter(type %in% "V. parahaemolyticus") %>%
  rename("Vp" = "copies_mL")
vv<-
  sp %>%
  filter(type %in% "V. vulnificus") %>%
  rename("Vv" = "copies_mL")

#SITE_SPECIES DF
b_vc <- 
  vc %>%
  filter(site %in% "Blind Oso") %>% 
  select(Vc, date)
b_vv <- 
  vv %>%
  filter(site %in% "Blind Oso") %>%
  select(Vv, date)
b_vp <- 
  vp %>%
  filter(site %in% "Blind Oso") %>%
  select(Vp, date)

c_vc <- 
  vc %>%
  filter(site %in% "Canals") %>% 
  select(Vc, date)
c_vv <- 
  vv %>%
  filter(site %in% "Canals") %>%
  select(Vv, date)
c_vp <- 
  vp %>%
  filter(site %in% "Canals") %>%
  select(Vp, date)

r_vc <- 
  vc %>%
  filter(site %in% "Gulf") %>% 
  select(Vc, date)
r_vv <- 
  vv %>%
  filter(site %in% "Gulf") %>%
  select(Vv, date)
r_vp <- 
  vp %>%
  filter(site %in% "Gulf") %>%
  select(Vp, date)
```

#### Combine Species with Site Masters

```{r}
b_list<- list(b_vc, b_vv, b_vp, bo)
c_list<- list(c_vc, c_vv, c_vp, c2)
r_list<- list(r_vc, r_vv, r_vp, rd)

bo<- 
  b_list %>% reduce(full_join, by = 'date') %>%
  select(!c(date, ...1, Vp)) %>%
  rename("V. cholerae" = "Vc",
         "V. vulnificus" = "Vv")

c2<- 
  c_list %>% reduce(full_join, by = 'date') %>%
  select(!c(date, ...1)) %>%
  rename("V. cholerae" = "Vc",
         "V. parahaemolyticus" = "Vp",
         "V. vulnificus" = "Vv")

rd<- 
  r_list %>% reduce(full_join, by = 'date') %>%
  select(!c(date, ...1)) %>%
  rename("V. cholerae" = "Vc",
         "V. parahaemolyticus" = "Vp",
         "V. vulnificus" = "Vv")
```

#### Table: Env, Spp, Total

This is using Spearman's for all. This [Correlation Function](https://paulvanderlaken.com/2020/07/28/publication-ready-correlation-matrix-significance-r/) uses a df as opposed to a matrix, so it is more user friendly for making tables.

p\* = \< 0.05 // \*\* = \< 0.01 // \*\*\* = \<0.001

\captionsetup[table]{labelformat=empty}

```{r}
bo_table<-
  kable(as.data.frame(correlation_matrix(bo, type = "spearman", digits = 2)) %>%
  select(1:4) %>%
    filter(!row_number() %in% c(1:4)),
  caption = "Blind Oso: Correlations between Environmental and Biological Variables using Spearman's Rank correlations")

c2_table<-
  kable(as.data.frame(correlation_matrix(c2, type = "spearman", digits = 2)) %>%
  select(1:5) %>%
    filter(!row_number() %in% c(1:5)),
  caption = "Canals: Correlations between Environmental and Biological Variables using Spearman's Rank correlations")

rd_table<-
  kable(as.data.frame(correlation_matrix(rd, type = "spearman", digits = 2)) %>%
  select(1:5) %>%
    filter(!row_number() %in% c(1:5)),
  caption = "Gulf: Correlations between Environmental and Biological Variables using Spearman's Rank correlations")

bo_table
c2_table
rd_table
```

#### Matrix: Env, Sp, Total

##### Create Matrix for all environmental parameters, species, and total vibrio

```{r, include = FALSE}
bo_2<- rcorr(as.matrix(bo))
flattenCorrMatrix(bo_2$r, bo_2$P)

c2_2<- rcorr(as.matrix(c2))
flattenCorrMatrix(c2_2$r, c2_2$P)

rd_2<- rcorr(as.matrix(rd))
flattenCorrMatrix(rd_2$r, rd_2$P)
```

#### Table: Species, Total, Chl

```{r}
bo_table2<-
  kable(as.data.frame(correlation_matrix(bo, type = "spearman", digits = 2)) %>%
  select(1:4) %>%
    filter(row_number() %in% c(22,23)),
  caption = "Blind Oso: Correlations between Dust Depsoition and Biological Variables using Spearman's Rank correlations")

c2_table2<-
  kable(as.data.frame(correlation_matrix(c2, type = "spearman", digits = 2)) %>%
  select(1:5) %>%
    filter(row_number() %in% c(23,24)),
  caption = "Canals: Correlations between Dust Depsoition and Biological Variables using Spearman's Rank correlations")

rd_table2<-
  kable(as.data.frame(correlation_matrix(rd, type = "spearman", digits = 2)) %>%
  select(1:5) %>%
    filter(row_number() %in% c(23,24)),
  caption = "Gulf: Correlations between Dust Depsoition and Biological Variables using Spearman's Rank correlations")

bo_table2
c2_table2
rd_table2

```

It's also possible to **combine correlogram with the significance test**. We'll use the result *res.cor2* generated in the previous section with **rcorr**() function \[in **Hmisc** package\]:

We get errors but still get the corrplot

Stack overflow: In the vignette for package 'corrplot' it says "We can get p-value matrix...by cor.mtest()...". The output of that function produces a p-values matrix with zeroes on the diagonal. The output of rcorr produces a matrix of p-values with NA on the diagonal. Maybe you can just replace your NA diagonal values with zeroes. If you switch to cor.mtest() you'll need to be sure and understand all of its parameters.

```{r, fig.width=9}
#Single out factors of interst by making them red
colors<- c("#ba4716", "#ba4716","#ba4716","#ba4716", "#ba4716","black","black","black","black","black","black","black","black","black","black","black","black","black","black","black","black","black","black","black", "black")

#BLIND OSO
corrplot(bo_2$r, type="upper", 
         tl.col = colors,
         p.mat = bo_2$P, sig.level = 0.05, insig = "blank")

#CANALS

corrplot(c2_2$r, type="upper", 
         tl.col = colors, 
         p.mat = c2_2$P, sig.level = 0.05, insig = "blank")

#GULF

corrplot(rd_2$r, type="upper", 
         tl.col = colors,
         p.mat = rd_2$P, sig.level = 0.05, insig = "blank")
```

#### 
