---
title: "cor"
format:
  html:
    theme: default
---

**This code creates a correlation matrix to look at relationships between variables. This helps identify specific relationships of interest**

[Link](http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software):

# Getting Started

#### Libraries

```{r, include= FALSE}
library(tidyverse)
library(here)
library(Hmisc)#Cor Tables and Lag
library(corrplot) #Cor Plots
library(lubridate) #For dates
library(ggpubr) #Plot stacking
library(kableExtra)
library(naniar)
```

#### Data

```{r, include = FALSE}
bo<- read_csv(here("data", "processed_data", "bo_master.csv"))
c2<- read_csv(here("data", "processed_data", "c2_master.csv"))
rd<- read_csv(here("data", "processed_data", "rd_master.csv"))
```

# Cleaning

#### Remove non-numeric variables

```{r}
bo<- 
  bo %>%
  select(!c(date, ...1))

c2<- 
  c2 %>%
  select(!c(date, ...1))

rd<- 
  rd %>%
  select(!c(date, ...1))
```

### Make Datasets for normal and non-normal variables

Variables that are normally distributed across all three sites will be in one df. All others will be in another.

```{r}
#BLIND OSO
b_norm<- 
  bo %>%
  select(!c(sal, secchi, nn, tdn, don, doc, toc, tn))
b_para<- 
  bo %>%
  select(sal, secchi, nn, tdn, don, doc, toc, tn)

#CANALS
c_norm<- 
  c2 %>%
  select(!c(sal, secchi, nn, tdn, don, doc, toc, tn))
c_para<- 
  c2 %>%
  select(sal, secchi, nn, tdn, don, doc, toc, tn)

#GULF
r_norm<- 
  rd %>%
  select(!c(sal, secchi, nn, tdn, don, doc, toc, tn))
r_para<- 
  rd %>%
  select(sal, secchi, nn, tdn, don, doc, toc, tn)
```

### Log10 Transform non-normally distributed data for Norm df

Distributions can be found in `1_distribution.qmd`

```{r}
#BLIND OSO
b_norm<-
  b_norm %>%
  mutate(amm = log10(amm), #Log-transforms data
         din_dip = log10(din_dip),
         dust = log10(dust),
         chl = log10(chl),
         dust_lag = log10(dust_lag)) 
 
#CANALS
c_norm<- 
  c_norm %>%
  mutate(orthop = log10(orthop),
         dust = log10(dust),
         dust_lag = log10(dust_lag)) 


#GULF
r_norm<- 
  r_norm %>%
  mutate(dust = log10(dust),
         dust_lag = log10(dust_lag))
```

# Correlation Matrix

There are different methods for **correlation analysis** : **Pearson parametric correlation test**, **Spearman** and **Kendall** rank-based **correlation analysis**. The default is [pearson correlation coefficient](http://www.sthda.com/english/wiki/correlation-test-between-two-variables) which measures the linear **dependence** between two variables. [kendall and spearman](http://www.sthda.com/english/wiki/correlation-test-between-two-variables) correlation methods are non-parametric **rank-based correlation test**.

#### Compute Correlation Matrix

If your data contain missing values, use the following R code to handle missing values by case-wise deletion.

    cor(x, method = "pearson", use = "complete.obs")

```{r, include = FALSE}
#Normal Data = Pearson's
b<- cor(b_norm, method = "pearson") #Default method = pearson
round(b,2) #Round correlation coeff to "x" digits 

c<- cor(c_norm, method = "pearson")
round(c,2)

r<- cor(r_norm, method = "pearson")
round(r,2)

#Non-parametric Data  = Spearman's
b1<- cor(b_para, method = "spearman") 
round(b,2) #Round correlation coeff to "x" digits 

c1<- cor(c_para, method = "spearman")
round(c,2)

r1<- cor(r_para, method = "spearman")
round(r,2)

#All Data = Spearman's
b2<- cor(bo, method = "spearman") 
round(b,2) #Round correlation coeff to "x" digits 

c2<- cor(c2, method = "spearman")
round(c,2)

r2<- cor(rd, method = "spearman")
round(r,2)
```

#### Make Function to Format

Simple function for formatting a **correlation matrix** into a table with 4 columns containing : Column 1 : row names (variable 1 for the correlation test), Column 2 : column names (variable 2 for the correlation test), Column 3 : the **correlation coefficients**, Column 4 : the **p-values** of the correlations

```{r}
flattenCorrMatrix <- function(cormat, pmat) {
  ut <- upper.tri(cormat)
  data.frame(
    row = rownames(cormat)[row(cormat)[ut]],
    column = rownames(cormat)[col(cormat)[ut]],
    cor  =(cormat)[ut],
    p = pmat[ut])}
```

#### Make Matrix

The function **rcorr()** \[in **Hmisc** package\] can be used to compute the **significance levels** for **pearson** and **spearman correlations**. It returns both the correlation coefficients and the p-value of the correlation for all possible pairs of columns in the data table.

```{r}
bclean<- rcorr(as.matrix(b_norm))
flattenCorrMatrix(bclean$r, bclean$P)

cclean<- rcorr(as.matrix(c_norm))
flattenCorrMatrix(cclean$r, cclean$P)

rclean<- rcorr(as.matrix(r_norm))
flattenCorrMatrix(rclean$r, rclean$P)
```

#### Extract cor and p values

```{r}
b_p_values<-
 as.data.frame(bclean$P)

```

#### Visualize with `corrplot()` function

The function **corrplot()** takes the **correlation matrix** as the first argument. The second argument (type="upper") is used to display only the upper triangular of the **correlation matrix**.

```{r, fig.width=6}
#par(mfrow=c(3,3))
#Normal Data 
 corrplot(b, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Blind Oso_Pearson",  mar=c(0,0,1,0)) #Adds and lowers title 

 corrplot(c, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Canals_Pearson", mar=c(0,0,1,0))

 corrplot(r, type = "upper", 
         tl.col = "black", tl.srt = 45, mar=c(0,0,1,0))
         title(main = "Gulf_Pearson")
         
#Non-Parametric Data
 corrplot(b1, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Blind Oso_Spearman",  mar=c(0,0,1,0)) #Adds and lowers title 

corrplot(c1, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Canals_Spearman", mar=c(0,0,1,0))

corrplot(r1, type = "upper", 
         tl.col = "black", tl.srt = 45, mar=c(0,0,1,0))
         title(main = "Gulf_Spearman" )
         
#Non-Parametric Data
 corrplot(b2, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Blind Oso_Spearman_all",  mar=c(0,0,1,0)) #Adds and lowers title 

corrplot(c2, type = "upper", 
         tl.col = "black", tl.srt = 45,
         title = "Canals_Spearman_all", mar=c(0,0,1,0))

corrplot(r2, type = "upper", 
         tl.col = "black", tl.srt = 45, mar=c(0,0,1,0))
         title(main = "Gulf_Spearman_all" )
```

##### 

It's also possible to **combine correlogram with the significance test**. We'll use the result *res.cor2* generated in the previous section with **rcorr**() function \[in **Hmisc** package\]:

<!--# Get this to work -->

```{r}
# Insignificant correlation are crossed
#corrplot(bclean$r, type="upper", order="hclust", 
        # p.mat = bclean$P, sig.level = 0.05, insig = "blank")

#corrplot(cclean$r, type="upper", order="hclust", 
        # p.mat = cclean$P, sig.level = 0.05, insig = "blank")

#corrplot(rclean$r, type="upper", order="hclust", 
         #p.mat = rclean$P, sig.level = 0.05, insig = "blank")

```

# Correlation Table

#### Corrleation Matrices --> DF

This is using Spearman's for all

```{r}
b_df<-
  as.data.frame(b2) %>%
  round(2) 

c_df<-
  as.data.frame(c2) %>%
  round(2)

r_df<-
  as.data.frame(r2) %>%
  round(2)
  
```

```{r}
cor_tbl<-
kable(data.frame(
Environment = c("Chl", "Salinity", "Temperature", "DO (mg/L)", "DO (%)", "pH", "Secchi", "Ammonium", "Nitrate+Nitrite", "Orthophosphate", "Silicate", "DIN", "DIN:DIP", "TDN", "DON", "DOC", "TOC", "TN", "Dust Lag"),

`Blind Oso Vibrio` = c(b_df["copies_mL", "chl"], b_df["copies_mL", "sal"], b_df["copies_mL", "temp"], b_df["copies_mL", "do_mgl"], b_df["copies_mL", "do_per"], b_df["copies_mL", "pH"], b_df["copies_mL", "secchi"], b_df["copies_mL", "amm"], b_df["copies_mL", "nn"], b_df["copies_mL", "orthop"], b_df["copies_mL", "sil"], b_df["copies_mL", "din"], b_df["copies_mL", "din_dip"], b_df["copies_mL", "tdn"], b_df["copies_mL", "don"], b_df["copies_mL", "doc"], b_df["copies_mL", "toc"], b_df["copies_mL", "tn"], b_df["copies_mL", "dust_lag"]),

`Canals Vibrio` = c(c_df["copies_mL", "chl"], c_df["copies_mL", "sal"], c_df["copies_mL", "temp"], c_df["copies_mL", "do_mgl"], c_df["copies_mL", "do_per"], c_df["copies_mL", "pH"], c_df["copies_mL", "secchi"], c_df["copies_mL", "amm"], c_df["copies_mL", "nn"], c_df["copies_mL", "orthop"], c_df["copies_mL", "sil"], c_df["copies_mL", "din"], c_df["copies_mL", "din_dip"], c_df["copies_mL", "tdn"], c_df["copies_mL", "don"], c_df["copies_mL", "doc"], c_df["copies_mL", "toc"], c_df["copies_mL", "tn"], c_df["copies_mL", "dust_lag"]),

`Gulf Vibrio` = c(r_df["copies_mL", "chl"], r_df["copies_mL", "sal"], r_df["copies_mL", "temp"], r_df["copies_mL", "do_mgl"], r_df["copies_mL", "do_per"], r_df["copies_mL", "pH"], r_df["copies_mL", "secchi"], r_df["copies_mL", "amm"], r_df["copies_mL", "nn"], r_df["copies_mL", "orthop"], r_df["copies_mL", "sil"], r_df["copies_mL", "din"], r_df["copies_mL", "din_dip"], r_df["copies_mL", "tdn"], r_df["copies_mL", "don"], r_df["copies_mL", "doc"], r_df["copies_mL", "toc"], r_df["copies_mL", "tn"], r_df["copies_mL", "dust_lag"])))


cor_tbl
```
