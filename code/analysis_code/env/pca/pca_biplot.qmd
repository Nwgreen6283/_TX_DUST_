---
title: "pca_biplot"
format:
  html:
    theme: default
---

**PCA Biplot analysis**

[Link](https://statisticsglobe.com/visualization-pca-r)

<!--# Will do monthly later -->

# Intro

#### Libs

```{r, include = FALSE}
library(FactoMineR)
library(ggfortify)
library(factoextra)
library(scatterplot3d)
library(here)
library(tidyverse)
```

#### Data

```{r}
data<- read.csv(here("data", "processed_data", "tx_master.csv"))
bo_d<- read.csv(here("data", "processed_data", "bo_master_daily.csv"))
c2_d<- read.csv(here("data", "processed_data", "c2_master_daily.csv"))
rd_d<- read.csv(here("data", "processed_data", "rd_master_daily.csv"))
```

# Cleaning

## DAILY

#### Make Site Column and Combine Daily DF

```{r}
bo_d<-
  bo_d %>%
  mutate(site = "BO") %>%
  select(!X)

c2_d<-
  c2_d %>%
  mutate(site = "C2") %>%
  select(!X)

rd_d<-
  rd_d %>%
  mutate(site = "RD") %>%
  select(!X)

master<- rbind(bo_d, c2_d, rd_d) %>%
  select(!c(hf_copies_mL,date)) %>%#Remove Non-numerics and HF183 (not run on all sites)
  mutate(site = as.factor(site))
```

# PCA

## Perform PCA

We will perform a PCA for all selected variables except for the [factor variable](https://www.stata.com/features/overview/factor-variables/) (`site`)

```{r}
daily_pca <- prcomp(master[,-28], #28 is site column
                   scale=TRUE)
```

## Visualize Observations

After a PCA, the observations are expressed in principal component scores. Therefore, it is important to visualize the observations along the new axes (principal components) to interpret the relations in the dataset.

```{r}
PC<- as.data.frame(daily_pca$x)
head(PC)
```

In addition to that, if the user has a factor variable, like in this case, he might be interested in showing the grouping on the plot as well. In such as case, the Label variable of wine_data can be added to the PC set as follows.

**We are using `site`**

```{r}
PC$site<-master$site
```

## 2D Scatterplot

The scatterplot in 2D can be plotted using the [plot()](https://statisticsglobe.com/plot-in-r-example) function and the data points can be colored by Label by assigning the color argument to `PC$site`. We can also add a legend using the [legend()](https://statisticsglobe.com/add-legend-to-plot-in-base-r) function to show the matching colors for each label.

```{r}
plot(PC$PC1,
     PC$PC2,
     col = PC$site,
     pch = 19,
     main="Figure 1: 2D Scatterplot",
     xlab="PC1",
     ylab="PC2")
 
legend("bottomright", 
       legend = levels(PC$site), 
       col = seq_along(levels(PC$site)), 
       pch = 19)
 
legend("bottomright", 
       legend = levels(PC$site), 
       col = seq_along(levels(PC$site)), 
       pch = 19)
```

## Ellipse Plot

[Confidence ellipses](https://www.real-statistics.com/multivariate-statistics/multivariate-normal-distribution/confidence-ellipse/) can also be added to a grouped scatter plot visualized after a PCA. Using the same dataset, we can plot them via the [ggplot2](https://ggplot2.tidyverse.org/) package. The grouping is indicated by the color argument in ggplot(); the geom_point() is used to plot the point cloud; then, the stat_ellipse() function is called to add the ellipses per wine group.

```{r}
ggplot(PC, 
       aes(x = PC1, 
       y = PC2, 
       color = site)) +
       geom_point() +
       scale_color_manual(values=c("black", "#CC0066", "green2")) +
       stat_ellipse() + ggtitle("Figure 2: Ellipse Plot") +
       theme_bw()

```

## 3D Scatterplot

To draw a 3d scatterplot of observations, one needs the first three principal components' scores. For the implementation, the [scatterplot3d()](https://www.rdocumentation.org/packages/scatterplot3d/versions/0.3-42/topics/scatterplot3d) function of the scatterplot3d package is called with the `color` argument assigned to the Label variable. To add a legend, we will use the legend() function and specify its coordinates via the xyz.convert() function.

```{r}
plot_3d <- with(PC, 
                scatterplot3d(PC$PC1, 
                              PC$PC2, 
                              PC$PC3, 
                              color = as.numeric(site), 
                              pch = 19, 
                              main ="Figure 3: 3D Scatter Plot", 
                              xlab="PC1",
                              ylab="PC2",
                              zlab="PC3"))
 
legend(plot_3d$xyz.convert(0.5, 0.7, 0.5), 
       pch = 19, 
       yjust=0,
       legend = levels(PC$site), 
       col = seq_along(levels(PC$site)))
```

## Visualization of Component-Variable Relations

In order to understand the relation between the principal components and the original variables, a visual that displays both elements are needed. [Biplots](https://statisticsglobe.com/biplot-pca-explained) are used in general for this purpose. They enable the user to understand what the components represent and each variable's share in these representations.

The fviz_pca_biplot() function from the factoextra package can help us to build a biplot. We will specify the deep sky blue color for the variables, or more specifically, for the [loading vectors](http://www.statistics4u.com/fundstat_eng/cc_pca_loadscore.html). Besides, the observation points will be colored in black by default. To find out different ways of plotting biplots in R please see our [Biplot in R](https://statisticsglobe.com/biplot-pca-r) tutorial.

\

```{r}
fviz_pca_biplot(daily_pca, 
                repel = TRUE,
                col.var = "deepskyblue",
                habillage  = PC$site,
                title = "Figure 4: Biplot", geom="point")

```

## Visualization of Explained Variance

Visualizing the [explained variance per principal component](https://statisticsglobe.com/principal-component-analysis-pca) is useful for deciding on the [ideal number of components to retain in the analysis](https://statisticsglobe.com/choose-optimal-number-components-pca). The [scree plots](https://statisticsglobe.com/scree-plot-pca) are specialized for this kind of visualization in [factor analyses](https://www.statisticssolutions.com/free-resources/directory-of-statistical-analyses/factor-analysis/?__cf_chl_tk=v.QRFngUvCfPZDX1hF.b9wX5.uP_5AkheKQUfcWHxZ0-1676557863-0-gaNycGzNCpA).

A scree plot can be visualized by using the fviz_eig() function of the factoextra package. We can set the `addlabels =` argument to TRUE so that the percentage of [explained variance](https://www.statology.org/explained-variance/) per component is shown on top of each bar plot.

```{r}
fviz_eig(daily_pca, 
         addlabels = TRUE, 
         ylim = c(0, 70),
         main="Figure 5: Scree Plot")
```

<!--# If i broke this up by site, I think that these would be higher -->
