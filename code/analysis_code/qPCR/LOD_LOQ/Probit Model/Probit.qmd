---
title: "Probit"
format:
  html:
    theme: default
---

# Probit analysis of real-time PCR protocols.

This R script performs probit analysis on the data from a real-time PCR experiment. A probit model is used to compute the effective dose of template, expressed as the number of copies per µL, that is required to achieve a given probability (e.g., 50%, 95%) of observing a positive RT-PCR µL.

The code depends on R packages \`drc\` and \`openxlsx\`. In addition, the script reads in the raw data saved to an external file, \`probit_raw_data_en.txt\`.

Both the present script and the raw data file need to be saved to the R working directory before running. Please do not change the name of the data file or else the script will not work. The user needs to input information in two places:

### 1. IN THE PRESENT SCRIPT

Scroll down to the editable section of the present script and key in a unique title for the analysis as a character string (don't forget the "" quotes). While this step is optional, giving a unique, informative title is recommended because the title is used in automatically generating the name ofthe output files.

### 2. IN THE RAW DATA FILE

The easiest way to insert the data is to do copy-paste from Excel. For this,you need to fill in three columns of an Excel worksheet as shown below:

| Nb_copies | Positives | Total |
|-----------|-----------|-------|
| 0.1       | 0         | 10    |
| 1         | 0         | 10    |
| 10        | 1         | 10    |
| 100       | 4         | 10    |
| 1000      | 9         | 10    |
| 10000     | 10        | 10    |
| 100000    | 10        | 10    |

-   The left column is the number of copies of template for each condition. I recommend at least six conditions. A series from 0.1 to 100,000 copies per µL should work fine.

-   The middle column is the number of positive reactions observed at each template point.

-   The right column is the total number of replicate reactions (usually 10) run for each condition. Save the \`probit_raw_data_en.txt\` before running the present script in

The output of the script will still be correct. See the pages linked below.

https://tutel.me/c/programming/questions/49444489/nonlinear+regression+prediction+in+r

https://stackoverflow.com/questions/55884074/recycling-array-of-length-1-in-array-vector-arithmetic-is-deprecated-optimizati

R code by jose-enrique.mejia\@inserm.fr

Last updated 21 September 2020.

# Code

**Libraries**

```{r}
require(drc)
require(openxlsx)
library(here)
```

**Set Title**

```{r}
#title <- "Total Bacteria"
#title<- "Total Vibrio"
#title<- "V.alginolyticus"
#title<- "V.cholerae"
#title<- "V.parahaemolyticus"
#title<- "V.vulnificus"
title<- "HF183"
```

**Data**

```{r}
probdata <- read.table(here("code", "analysis_code", "qPCR", "LOD_LOQ", 'Probit Model', "hf183.txt"), header = TRUE)

encab <- colnames(probdata)
colnames(probdata) <- c("Dose", "Positives", "Total")
```

```{r}
## These will be the percent values to calculate effective doses for.
steps <- c(1:9, seq(10, 85, by = 5), 90:99)
```

```{r}
## Colour scheme and other graphical parameters.
theme <- "black"
theme.grid <- "gray70"
shading <- adjustcolor(theme, alpha.f = 0.15)        #  For the 95% CI
thresholds <- adjustcolor(theme.grid, alpha.f = 1)   #  For the curve and arrows
ab.lines <- adjustcolor(theme.grid, alpha.f = 0.35)  #  For the minor grid
ab.lines2 <- adjustcolor(theme.grid, alpha.f = 0.85) #  For the powers of 10
coltext <- "red3"                                    #  For the 50% and 95% EDs
linewd1 <- 2
linewd2 <- 1
linewd3 <- 0.6
```

```{r, include = FALSE}
## Calculation of the probit model and predicted effective doses.
mod.probit <- drm(
    formula = I(Positives/Total) ~ Dose,
    weights = Total,
    data = probdata,
    fct = LN.2(),
    type = "binomial"
)
colnames(probdata) <- encab # Restores the column names in the raw data table.
EDose <- ED(mod.probit, respLev = steps, interval = "delta", level = 0.95)
EDose <- cbind(ED.percent = steps, EDose)
timestamp <- date()
```

## Graph 1

The code below saves a plot of the probit model to a .pdf file in the R working directory.

```{r}
## Start and configure the PDF engine.
pdf(file = paste("Probit ", title, " ", timestamp, ".pdf", sep = ""),
    bg = "white", height = 4.2, width = 6.6, family = "Helvetica",
    pointsize = 10.5)

## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", main = NULL, axes = FALSE,
	xlim = c(0.1, 10^5), ylim = c(0, 1),
	xlab = "Copies per µL", ylab = "Positives/Total"
	)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
     labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
     cex = 0.25)

## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd2,
       col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd2, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd2, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd2, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd2, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd2, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd2, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd2, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd2, col = thresholds)

## Overlay the assay points and the curve for the probit model.
par(new = TRUE)
plot(mod.probit, pch = 21, bg = shading, cex = 0.8755, xlim = c(0.1, 10^5),
     ylim = c(0, 1), lwd = linewd1, col = theme, main = NULL,  xlab = "",
     ylab = "", axes = FALSE)

## Plot the 95% confidence interval using transparent shading.
pxx <- c(
    seq(0.1, 0.99, by = 0.01),
    seq(1, 99.9, by  = 0.1),
    seq(100, 999, by = 1),
    seq(1000, 9990, by = 10)
)
predict2.ci <- predict(mod.probit, newdata = data.frame(X = pxx),
                       interval = "confidence", level = 0.95)
pxy <- data.frame(Dose = pxx, Effect = predict2.ci[, 1])
pxy <- pxy[pxy[, 2] < 0.999, ]
pxx <- pxy[, 1]; rm(pxy)
predict2.ci <- predict2.ci[1:length(pxx), ]
for(i in 1:nrow(predict2.ci)) {
	ifelse(predict2.ci[i, 3] > 1, predict2.ci[i, 3] <- 1, NA)
	}
for(i in 1:nrow(predict2.ci)) {
	ifelse(predict2.ci[i, 2] < 0, predict2.ci[i, 2] <- 0, NA)
	}
polygon(x = c(pxx, rev(pxx)),
        y = c(predict2.ci[,2], rev(predict2.ci[,3])),
        col = shading, border = NA)

## Plot the legend.
legend("bottomright", bty = "o", cex = 0.8755, bg = "white", box.col = NA,
       box.lwd = 1, inset = c(0.013, 0.021), y.intersp = 1.15,
	   legend = c("Assay points", "Probit model", "95% CI"), lty = c(NA, 1, NA),
	   pch = c(21, NA, 15), lwd = c(NA, linewd1, NA),
	   col = c(theme, theme, shading), seg.len =1.15, pt.cex = c(0.75, NA, 1.8),
	   pt.bg = c(shading, NA, NA), pt.lwd = linewd1)

## Draw arrows and annotations for the ED50 and ED95 intercept with the probit
## curve.
arrows(EDose[EDose[, 1] == 50, 2], 0.5, EDose[EDose[, 1] == 50, 2], 0,
       length = 0.06, angle = 25, code = 2, col = theme, lty = 1,
       lwd = 1.25 * linewd2)
arrows(EDose[EDose[, 1] == 95, 2], 0.95, EDose[EDose[, 1] == 95, 2], 0,
       length = 0.06, angle = 25, code = 2, col = theme, lty = 1,
       lwd = 1.25 * linewd2)
text(EDose[EDose[, 1] == 50, 2], 0.5,
     labels = signif(EDose[EDose[, 1] == 50, 2], digits = 3), cex = 1.5,
     pos = 2, col = coltext, offset = 1.05)
text(EDose[EDose[, 1] == 95, 2], 0.95,
     labels = signif(EDose[EDose[, 1] == 95, 2], digits = 3), cex = 1.5,
     pos = 2, col = coltext, offset = 1.05)

dev.off()
```

## Graph 2

```{r}
## Start and configure the PDF engine.
pdf(file = paste("Probit ", title, " ", timestamp, " A4.pdf", sep = ""),
	height = 4.2, width = 6.6, family = "Helvetica", pointsize = 10.5,
	paper = "a4", pagecentre = TRUE)

## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", main = NULL, axes = FALSE,
	xlim = c(0.1, 10^5), ylim = c(0, 1),
	xlab = "Copies per µL", ylab = "Positives/Total"
	)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
     labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
     cex = 0.25)

## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd2,
       col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd2, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd2, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd2, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd2, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd2, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd2, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd2, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd2, col = thresholds)

## Overlay the assay points and the curve for the probit model.
par(new = TRUE)
plot(mod.probit, pch = 21, bg = shading, cex = 0.8755, xlim = c(0.1, 10^5),
     ylim = c(0, 1), lwd = linewd1, col = theme, main = NULL,  xlab = "",
     ylab = "", axes = FALSE)

## Plot the 95% confidence interval using transparent shading.
pxx <- c(
    seq(0.1, 0.99, by = 0.01),
    seq(1, 99.9, by  = 0.1),
    seq(100, 999, by = 1),
    seq(1000, 9990, by = 10)
)
predict2.ci <- predict(mod.probit, newdata = data.frame(X = pxx),
                       interval = "confidence", level = 0.95)
pxy <- data.frame(Dose = pxx, Effect = predict2.ci[, 1])
pxy <- pxy[pxy[, 2] < 0.999, ]
pxx <- pxy[, 1]; rm(pxy)
predict2.ci <- predict2.ci[1:length(pxx), ]
for(i in 1:nrow(predict2.ci)) {
	ifelse(predict2.ci[i, 3] > 1, predict2.ci[i, 3] <- 1, NA)
	}
for(i in 1:nrow(predict2.ci)) {
	ifelse(predict2.ci[i, 2] < 0, predict2.ci[i, 2] <- 0, NA)
	}
polygon(x = c(pxx, rev(pxx)),
        y = c(predict2.ci[,2], rev(predict2.ci[,3])),
        col = shading, border = NA)

## Plot the legend.
legend("bottomright", bty = "o", cex = 0.8755, bg = "white", box.col = NA,
       box.lwd = 1, inset = c(0.013, 0.021), y.intersp = 1.15,
	   legend = c("Assay points", "Probit model", "95% CI"), lty = c(NA, 1, NA),
	   pch = c(21, NA, 15), lwd = c(NA, linewd1, NA),
	   col = c(theme, theme, shading), seg.len =1.15, pt.cex = c(0.75, NA, 1.8),
	   pt.bg = c(shading, NA, NA), pt.lwd = linewd1)

## Draw arrows and annotations for the ED50 and ED95 intercept with the probit
## curve.
arrows(EDose[EDose[, 1] == 50, 2], 0.5, EDose[EDose[, 1] == 50, 2], 0,
       length = 0.06, angle = 25, code = 2, col = theme, lty = 1,
       lwd = 1.25 * linewd2)
arrows(EDose[EDose[, 1] == 95, 2], 0.95, EDose[EDose[, 1] == 95, 2], 0,
       length = 0.06, angle = 25, code = 2, col = theme, lty = 1,
       lwd = 1.25 * linewd2)
text(EDose[EDose[, 1] == 50, 2], 0.5,
     labels = signif(EDose[EDose[, 1] == 50, 2], digits = 3), cex = 1.5,
     pos = 2, col = coltext, offset = 1.05)
text(EDose[EDose[, 1] == 95, 2], 0.95,
     labels = signif(EDose[EDose[, 1] == 95, 2], digits = 3), cex = 1.5,
     pos = 2, col = coltext, offset = 1.05)

dev.off()
```

## Temporary .png File

The code below saves a .png plot of the probit model to the R working directory. This image is later inserted into the Excel file, and the .png file finally deleted.

```{r}
## Start and configure the PNG engine.
png(file = "temp.png", bg = "white",
	width = 1200, height = 750, units = "px", res = 600,
	type = "cairo", antialias = "default",
	family = "Helvetica", pointsize = 3)

par(oma = c(0.05,0.05,0.05,0.05))

## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", xlim = c(0.1, 10^5), ylim = c(0, 1),
	xlab = "Copies per µL", ylab = "Positives/Total", font.main = 1,
	main = paste(title, " ", timestamp, sep = ""), cex.main = 0.8, axes = FALSE)

## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd3,
       col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd3, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd3, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd3, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd3, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd3, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd3, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd3, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd3, col = thresholds)

## Overlay the assay points and the curve for the probit model. Draw the axes.
par(new = TRUE)
plot(mod.probit,
	pch = 19, bg = shading, cex = 0.875, xlim = c(0.1, 10^5), ylim = c(0, 1),
	lwd = linewd2, col = theme,
	main = "", xlab = "", ylab = "",
	axes = FALSE, bty = "n"
	)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
     labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1, lwd = 0.8,
     lwd.ticks = 0.8)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
     cex = 0.25, lwd = 0.8, lwd.ticks = 0.8)

## Plot the 95% confidence interval using transparent shading.
polygon(x = c(pxx, rev(pxx)),
        y = c(predict2.ci[,2], rev(predict2.ci[,3])),
        col = shading, border = NA)

## Plot the legend.
legend(x = 12500, y = 0.225, bty = "o", cex = 0.8, bg = "white", box.col = NA,
       box.lwd = 1, inset = c(0.02, 0.03), y.intersp = 1.15,
	   legend = c("Assay points", "Probit model", "95% CI"), lty = c(NA, 1, NA),
	pch = c(19, NA, 15), lwd = c(NA, linewd2, NA), seg.len =1.15,
	col = c(theme, theme, shading), pt.cex = c(0.7, NA, 1.8), pt.lwd = linewd2)

## Draw arrows and annotations for the ED50 and ED95 intersection with the probit curve.
arrows(EDose[EDose[, 1] == 50, 2], 0.5, EDose[EDose[, 1] == 50, 2], 0,
       length = 0.025, angle = 25, code = 2, col = theme, lty = 1,
       lwd = 1.05 * linewd3)
arrows(EDose[EDose[, 1] == 95, 2], 0.95, EDose[EDose[, 1] == 95, 2], 0,
       length = 0.025, angle = 25, code = 2, col = theme, lty = 1,
       lwd = 1.05 * linewd3)
text(EDose[EDose[, 1] == 50, 2], 0.5,
     labels = signif(EDose[EDose[, 1] == 50, 2], digits = 3), cex = 1.5,
     pos = 2, col = coltext, offset = 1.05)
text(EDose[EDose[, 1] == 95, 2], 0.95,
     labels = signif(EDose[EDose[, 1] == 95, 2], digits = 3), cex = 1.5,
     pos = 2, col = coltext, offset = 1.05)

#Commented out dev.off() so i could look at the .png
#dev.off()
```

## Output to text file

```{r}
## The code below saves the results to a .txt file in the R working directory.
sink(paste("Probit ", title, " ", timestamp, ".txt", sep = ""))
print(paste("Probit job name:", title, sep = " "), quote = FALSE)
cat(rep("_", times = 33))
cat("\n\nRaw data\n")
print(probdata)
cat(rep("_", times = 33))
cat("\n\nCoefficients of the probit model\n")
print(summary(mod.probit))
cat(rep("_", times = 33))
cat("\n\nEffective dose + lower/upper bounds of 95% CI\n")
print(round(EDose, digits = 4))
cat(rep("_", times = 33))
cat("\n\n")
print(paste("Date & time ", timestamp, sep = " "),  quote = FALSE)
sink()
```

## Output to Excel File

```{r}
## The code below saves the effective dose results and the raw data to an Excel-
## readable (read-only) file in the R working directory.

workbook.name <- paste("Probit_ED ", title, " ", timestamp, ".xlsx", sep = "")
WB <- createWorkbook()
addWorksheet(WB, "Probit assay")
addWorksheet(WB, "ED + graph")
writeDataTable(WB, "Probit assay", probdata)
writeDataTable(WB, "ED + graph", data.frame(EDose))
#insertImage(WB, "ED + graph", "temp.png", width = 9, height = 5.625,
           # startRow = 1, startCol = 7, units = "in", dpi = 300)
saveWorkbook(WB, workbook.name, overwrite = FALSE)
rm(WB, workbook.name)


## Tidy up the working directory & print notice of completion to screen.
if (file.exists("temp.png")) file.remove("temp.png")
rm(title, probdata, encab, steps, theme.grid, timestamp, mod.probit, i, EDose,
   pxx, predict2.ci, ab.lines, linewd1, linewd2, linewd3, theme, shading,
   thresholds, ab.lines2)
cat(
	"\nThe following files have been saved to the R working directory:\n",
	"1. A plot of the probit model (PDF).\n",
	"2. A second plot of the probit model as an A4 PDF.\n",
	"3. Results tables (text file).\n",
	"4. Results tables + embedded plot (Excel workbook).\n",
	fill = FALSE
	)
```
